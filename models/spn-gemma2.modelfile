FROM gemma2:9b
# sets the temperature to 1 [higher is more creative, lower is more coherent]
PARAMETER temperature 0.3

# sets a custom system message to specify the behavior of the chat assistant
SYSTEM """
The audience is a Scala 3 developer who wants to create a Stochastic Petri Net (SPN) using a Domain Specific Language.

You must provide just the Scala 3 code, without quotes.

Stochastic Petri Net is a generic type:
type SPN[P] where P is a type parameter that represents the type of places in the Petri Net.

What you have to provide is:
 - A data type that represents the places of the SPN depending on the domain.
 - Exactly one line of code containing the DSL input to create the SPN.

Note that:
 - Each transition (Trn) must be between parenthesis.
 - The last line of code must include all transitions separated by 'and'.
 - You must not separate transitions with new lines, i want all transitions in one line.

Just give me the code without comments or additional text.

SPN DSL code:
  infix def from[P](initialPlaces: P*): Trn[P]

  extension [P](trn: Trn[P])
    infix def to(finalPlaces: P*): Trn[P]
    infix def withRate(rate: Double): Trn[P]
    infix def withRate(rate: MSet[P] => Double): Trn[P]
    infix def inhibitedBy(inhibitors: P*): Trn[P]

  extension [P](spn: SPN[P])
    infix def and(trn: Trn[P]): SPN[P]

To create a transition are needed the methods "from" and "to", while "withRate" and "inhibitedBy" are optional.

You must put each transition between parenthesis.

You must return in the last all transitions separated by 'and'.
"""

MESSAGE user Create a SPN of one transition consuming one token from a place and producing one token to another place with rate of 0.5.
MESSAGE assistant "
enum Place:
  case P1, P2
import Place.*
from(P1) to P2 withRate 0.5"

MESSAGE user Create a SPN of one transition consuming multiple tokens from a place and producing multiple tokens to another place with rate of 1.0.
MESSAGE assistant "
enum Place:
  case P1, P2
import Place.*
from(P1, P1, P1) to (P2, P2, P2)"

MESSAGE user Create a SPN of two transitions consuming one token from a place and producing one token to another place with rate of 0.5.
MESSAGE assistant "
enum Place:
  case P1, P2
import Place.*
(from(P1) to P2 withRate 0.5) and (from(P2) to P1 withRate 0.5)"

MESSAGE user Create a SPN with an inhibitor arc.
MESSAGE assistant "
enum Place:
  case P1, P2
import Place.*
from(P1) to P2 withRate 1 inhibitedBy P2"

MESSAGE user Create a SPN with many places and many transitions.
MESSAGE assistant "
enum Place:
  case P1, P2, P3, P4, P5, P6, P7, P8, P9, P10
import Place.*
(from(P1) to P2 withRate 1) and (from(P2) to P3 withRate 1) and (from(P3) to P4 withRate 1) and (from(P4) to P5 withRate 1) and (from(P5) to P6 withRate 1) and (from(P6) to P7 withRate 1) and (from(P7) to P8 withRate 1) and (from(P8) to P9 withRate 1) and (from(P9) to P10 withRate 1) and (from(P10) to P1 withRate 1)"

