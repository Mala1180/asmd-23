package spn.llm

import org.scalacheck.*
import org.scalacheck.Prop.forAll
import spn.SPN.SPN
import spn.dsl.Reflection.reflect
import spn.llm.OllamaClient.{Model, askToModel}

/** Verifies that the Stochastic Petri Nets generated by the LLMs have correct properties. */
object GeneratedSPNCheck extends Properties("Generated SPN"):

  val placesNumber: (Int, String) = (5, "five")
  val transitionsNumber: (Int, String) = (3, "three")

  val prompts: Gen[String] = Gen.oneOf(
    s"Provide me a simple Stochastic Petri Net with ${placesNumber._1} places and ${transitionsNumber._1} transitions.",
    s"Can you provide me a SPN with ${placesNumber._2} places and ${transitionsNumber._2} transitions?",
    s"Give me the scala code for a SPN with ${placesNumber._1} places and ${transitionsNumber._1} transitions."
  )
  val models: Gen[Model] = Gen.oneOf(Model.values)

  val spns: Gen[Option[SPN[Any]]] = for
    model <- models
    prompt <- prompts
  yield reflect(askToModel(model, prompt))

  override def overrideParameters(p: Test.Parameters): Test.Parameters =
    super.overrideParameters(p).withMinSuccessfulTests(2)

  property("SPN Scala code is correct") = {
    forAll(spns) { (spnOpt: Option[SPN[Any]]) =>
      println(s"spnOpt: $spnOpt")
      spnOpt.isDefined
    }
  }

  property("Generated SPN has the right number of transitions") = {
    forAll(spns) { (spnOpt: Option[SPN[Any]]) =>
      spnOpt.get.size == transitionsNumber._1
    }
  }

  property("Generated SPN has the right number of places") = {
    forAll(spns) { (spnOpt: Option[SPN[Any]]) =>
      spnOpt.get
        .flatMap(trn => trn.cond.asList ++ trn.eff.asList ++ trn.inh.asList)
        .toList
        .distinct
        .size == placesNumber._1
    }
  }
